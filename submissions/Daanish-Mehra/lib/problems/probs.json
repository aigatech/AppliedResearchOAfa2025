[
  {"id": 1, "name": "OneMax 20-bit", "type": "bitstring", "length": 20, "fitness": "sum(bits)", "difficulty": "easy", "description": "Maximize the number of 1s in a 20-bit string"},
  {"id": 2, "name": "OneMax 50-bit", "type": "bitstring", "length": 50, "fitness": "sum(bits)", "difficulty": "medium", "description": "Maximize the number of 1s in a 50-bit string"},
  {"id": 3, "name": "OneMax 100-bit", "type": "bitstring", "length": 100, "fitness": "sum(bits)", "difficulty": "hard", "description": "Maximize the number of 1s in a 100-bit string"},
  {"id": 4, "name": "LeadingOnes 20-bit", "type": "bitstring", "length": 20, "fitness": "consecutive 1s from start", "difficulty": "medium", "description": "Maximize consecutive 1s from the beginning"},
  {"id": 5, "name": "LeadingOnes 50-bit", "type": "bitstring", "length": 50, "fitness": "consecutive 1s from start", "difficulty": "hard", "description": "Maximize consecutive 1s from the beginning"},
  {"id": 6, "name": "LeadingOnes 100-bit", "type": "bitstring", "length": 100, "fitness": "consecutive 1s from start", "difficulty": "expert", "description": "Maximize consecutive 1s from the beginning"},
  {"id": 7, "name": "Simple Trap 10-bit", "type": "bitstring", "length": 10, "fitness": "trap function", "difficulty": "medium", "description": "Deceptive trap function with local optima"},
  {"id": 8, "name": "Simple Trap 20-bit", "type": "bitstring", "length": 20, "fitness": "trap function", "difficulty": "hard", "description": "Deceptive trap function with local optima"},
  {"id": 9, "name": "Knapsack 10-item", "type": "bitstring", "length": 10, "fitness": "sum(values if selected) <= capacity", "difficulty": "medium", "description": "Classic knapsack optimization"},
  {"id": 10, "name": "Knapsack 20-item", "type": "bitstring", "length": 20, "fitness": "sum(values if selected) <= capacity", "difficulty": "hard", "description": "Classic knapsack optimization"},
  
  {"id": 11, "name": "4-Queens", "type": "permutation", "length": 4, "fitness": "non-attacking pairs", "difficulty": "easy", "description": "Place 4 queens on 4x4 board without attacks"},
  {"id": 12, "name": "8-Queens", "type": "permutation", "length": 8, "fitness": "non-attacking pairs", "difficulty": "medium", "description": "Place 8 queens on 8x8 board without attacks"},
  {"id": 13, "name": "10-Queens", "type": "permutation", "length": 10, "fitness": "non-attacking pairs", "difficulty": "hard", "description": "Place 10 queens on 10x10 board without attacks"},
  {"id": 14, "name": "TSP 5 cities", "type": "permutation", "length": 5, "fitness": "inverse of total path length", "difficulty": "easy", "description": "Traveling Salesman Problem with 5 cities"},
  {"id": 15, "name": "TSP 8 cities", "type": "permutation", "length": 8, "fitness": "inverse of total path length", "difficulty": "medium", "description": "Traveling Salesman Problem with 8 cities"},
  {"id": 16, "name": "TSP 10 cities", "type": "permutation", "length": 10, "fitness": "inverse of total path length", "difficulty": "hard", "description": "Traveling Salesman Problem with 10 cities"},
  {"id": 17, "name": "Mini Sudoku 4x4", "type": "permutation", "length": 16, "fitness": "row+column+box constraints", "difficulty": "medium", "description": "4x4 Sudoku puzzle completion"},
  {"id": 18, "name": "Mini Sudoku 6x6", "type": "permutation", "length": 36, "fitness": "row+column+box constraints", "difficulty": "hard", "description": "6x6 Sudoku puzzle completion"},
  {"id": 19, "name": "Latin Square 4x4", "type": "permutation", "length": 16, "fitness": "row+column uniqueness", "difficulty": "medium", "description": "4x4 Latin square completion"},
  {"id": 20, "name": "Latin Square 6x6", "type": "permutation", "length": 36, "fitness": "row+column uniqueness", "difficulty": "hard", "description": "6x6 Latin square completion"},
  
  {"id": 21, "name": "y=x^2", "type": "expression", "dataset": [[-2,4],[-1,1],[0,0],[1,1],[2,4]], "fitness": "MSE", "difficulty": "easy", "description": "Find quadratic function y=x²"},
  {"id": 22, "name": "y=x^3", "type": "expression", "dataset": [[-2,-8],[-1,-1],[0,0],[1,1],[2,8]], "fitness": "MSE", "difficulty": "easy", "description": "Find cubic function y=x³"},
  {"id": 23, "name": "y=2x+3", "type": "expression", "dataset": [[-2,-1],[-1,1],[0,3],[1,5],[2,7]], "fitness": "MSE", "difficulty": "easy", "description": "Find linear function y=2x+3"},
  {"id": 24, "name": "y=sin(x)", "type": "expression", "dataset": [[0,0],[1,0.841],[2,0.909],[3,0.141],[4,-0.757]], "fitness": "MSE", "difficulty": "medium", "description": "Find trigonometric function y=sin(x)"},
  {"id": 25, "name": "y=cos(x)", "type": "expression", "dataset": [[0,1],[1,0.540],[2,-0.416],[3,-0.990],[4,-0.653]], "fitness": "MSE", "difficulty": "medium", "description": "Find trigonometric function y=cos(x)"},
  {"id": 26, "name": "y=x^2+x+1", "type": "expression", "dataset": [[-2,3],[-1,1],[0,1],[1,3],[2,7]], "fitness": "MSE", "difficulty": "medium", "description": "Find quadratic function y=x²+x+1"},
  {"id": 27, "name": "y=log(x+1)", "type": "expression", "dataset": [[0,0],[1,0.693],[2,1.098],[3,1.386],[4,1.609]], "fitness": "MSE", "difficulty": "hard", "description": "Find logarithmic function y=log(x+1)"},
  {"id": 28, "name": "y=x^2-2x+1", "type": "expression", "dataset": [[-2,9],[-1,4],[0,1],[1,0],[2,1]], "fitness": "MSE", "difficulty": "medium", "description": "Find quadratic function y=x²-2x+1"},
  {"id": 29, "name": "y=exp(x)", "type": "expression", "dataset": [[0,1],[1,2.718],[2,7.389],[3,20.085],[4,54.598]], "fitness": "MSE", "difficulty": "hard", "description": "Find exponential function y=e^x"},
  {"id": 30, "name": "y=x^3-3x+2", "type": "expression", "dataset": [[-2,-4],[-1,4],[0,2],[1,0],[2,2]], "fitness": "MSE", "difficulty": "hard", "description": "Find cubic function y=x³-3x+2"},
  
  {"id": 31, "name": "Bin Packing 5 items", "type": "constraint", "length": 5, "fitness": "minimize number of bins used", "difficulty": "easy", "description": "Pack 5 items into minimum bins"},
  {"id": 32, "name": "Bin Packing 10 items", "type": "constraint", "length": 10, "fitness": "minimize number of bins used", "difficulty": "medium", "description": "Pack 10 items into minimum bins"},
  {"id": 33, "name": "Job Scheduling 3 jobs", "type": "constraint", "length": 3, "fitness": "minimize makespan", "difficulty": "easy", "description": "Schedule 3 jobs to minimize completion time"},
  {"id": 34, "name": "Job Scheduling 5 jobs", "type": "constraint", "length": 5, "fitness": "minimize makespan", "difficulty": "medium", "description": "Schedule 5 jobs to minimize completion time"},
  {"id": 35, "name": "Job Scheduling 8 jobs", "type": "constraint", "length": 8, "fitness": "minimize makespan", "difficulty": "hard", "description": "Schedule 8 jobs to minimize completion time"},
  {"id": 36, "name": "Resource Allocation 3 tasks", "type": "constraint", "length": 3, "fitness": "maximize resource utilization", "difficulty": "medium", "description": "Allocate resources to 3 tasks optimally"},
  {"id": 37, "name": "Resource Allocation 5 tasks", "type": "constraint", "length": 5, "fitness": "maximize resource utilization", "difficulty": "hard", "description": "Allocate resources to 5 tasks optimally"},
  {"id": 38, "name": "Task Sequencing 4 tasks", "type": "constraint", "length": 4, "fitness": "minimize completion time", "difficulty": "medium", "description": "Sequence 4 tasks optimally"},
  {"id": 39, "name": "Task Sequencing 6 tasks", "type": "constraint", "length": 6, "fitness": "minimize completion time", "difficulty": "hard", "description": "Sequence 6 tasks optimally"},
  {"id": 40, "name": "Task Sequencing 8 tasks", "type": "constraint", "length": 8, "fitness": "minimize completion time", "difficulty": "expert", "description": "Sequence 8 tasks optimally"},
  
  {"id": 41, "name": "Graph Coloring 4 nodes", "type": "combinatorial", "length": 4, "fitness": "minimize color conflicts", "difficulty": "easy", "description": "Color 4-node graph with minimum colors"},
  {"id": 42, "name": "Graph Coloring 6 nodes", "type": "combinatorial", "length": 6, "fitness": "minimize color conflicts", "difficulty": "medium", "description": "Color 6-node graph with minimum colors"},
  {"id": 43, "name": "Graph Coloring 8 nodes", "type": "combinatorial", "length": 8, "fitness": "minimize color conflicts", "difficulty": "hard", "description": "Color 8-node graph with minimum colors"},
  {"id": 44, "name": "Shortest Path 4-node graph", "type": "combinatorial", "length": 4, "fitness": "inverse of path length", "difficulty": "easy", "description": "Find shortest path in 4-node graph"},
  {"id": 45, "name": "Shortest Path 6-node graph", "type": "combinatorial", "length": 6, "fitness": "minimize path length", "difficulty": "medium", "description": "Find shortest path in 6-node graph"},
  {"id": 46, "name": "Shortest Path 8-node graph", "type": "combinatorial", "length": 8, "fitness": "minimize path length", "difficulty": "hard", "description": "Find shortest path in 8-node graph"},
  {"id": 47, "name": "Max-Cut 4-node graph", "type": "combinatorial", "length": 4, "fitness": "size of cut", "difficulty": "medium", "description": "Find maximum cut in 4-node graph"},
  {"id": 48, "name": "Max-Cut 6-node graph", "type": "combinatorial", "length": 6, "fitness": "size of cut", "difficulty": "hard", "description": "Find maximum cut in 6-node graph"},
  {"id": 49, "name": "Max-Cut 8-node graph", "type": "combinatorial", "length": 8, "fitness": "size of cut", "difficulty": "expert", "description": "Find maximum cut in 8-node graph"},
  {"id": 50, "name": "Hamiltonian Path 5-node", "type": "combinatorial", "length": 5, "fitness": "1 if exists, else 0", "difficulty": "hard", "description": "Find Hamiltonian path in 5-node graph"},
  
  {"id": 51, "name": "OneMax + LeadingOnes 20-bit", "type": "multi-objective", "length": 20, "fitness": "sum(bits)+consecutive1s", "difficulty": "hard", "description": "Multi-objective: maximize 1s and leading 1s"},
  {"id": 52, "name": "OneMax + Trap 20-bit", "type": "multi-objective", "length": 20, "fitness": "sum(bits)+trap function", "difficulty": "expert", "description": "Multi-objective: maximize 1s and trap function"},
  {"id": 53, "name": "Knapsack + LeadingOnes 10-bit", "type": "multi-objective", "length": 10, "fitness": "value+leading1s", "difficulty": "hard", "description": "Multi-objective: maximize value and leading 1s"},
  {"id": 54, "name": "N-Queens + Max-Cut 4-node", "type": "multi-objective", "length": 4, "fitness": "non-attacking+cut", "difficulty": "expert", "description": "Multi-objective: N-queens and max-cut combined"},
  {"id": 55, "name": "TSP + Minimize Turns 5-city", "type": "multi-objective", "length": 5, "fitness": "distance+turn penalty", "difficulty": "hard", "description": "Multi-objective: minimize distance and turns"},
  {"id": 56, "name": "Symbolic Regression + Simplicity", "type": "multi-objective", "length": 5, "fitness": "MSE + expression length", "difficulty": "expert", "description": "Multi-objective: accuracy and simplicity"},
  {"id": 57, "name": "Job Scheduling + Resource Usage", "type": "multi-objective", "length": 5, "fitness": "minimize makespan + maximize utilization", "difficulty": "expert", "description": "Multi-objective: scheduling and resource optimization"},
  {"id": 58, "name": "Bin Packing + Diversity", "type": "multi-objective", "length": 10, "fitness": "minimize bins + maximize variation", "difficulty": "hard", "description": "Multi-objective: packing efficiency and diversity"},
  {"id": 59, "name": "Graph Coloring + Connectivity", "type": "multi-objective", "length": 6, "fitness": "color conflicts + connected components", "difficulty": "expert", "description": "Multi-objective: coloring and connectivity"},
  {"id": 60, "name": "Multi-Constraint Task Sequencing", "type": "multi-objective", "length": 6, "fitness": "minimize time + resource conflict", "difficulty": "expert", "description": "Multi-objective: time and resource optimization"},
  
  {"id": 61, "name": "Multi-Modal Optimization", "type": "hybrid", "length": 15, "fitness": "combined bitstring+permutation", "difficulty": "expert", "description": "Optimize both bitstring and permutation simultaneously"},
  {"id": 62, "name": "Dynamic Fitness Landscape", "type": "adaptive", "length": 20, "fitness": "changes over generations", "difficulty": "expert", "description": "Fitness function that evolves during optimization"},
  {"id": 63, "name": "Multi-Objective Knapsack", "type": "multi-objective", "length": 25, "fitness": "value+weight+volume optimization", "difficulty": "hard", "description": "3D knapsack with multiple constraints"},
  {"id": 64, "name": "Neural Architecture Search", "type": "neural", "length": 30, "fitness": "accuracy+latency trade-off", "difficulty": "expert", "description": "Optimize neural network architectures"},
  {"id": 65, "name": "Quantum Circuit Design", "type": "quantum", "length": 16, "fitness": "circuit depth + error rate", "difficulty": "expert", "description": "Design quantum computing circuits"},
  {"id": 66, "name": "Game Strategy Optimization", "type": "game", "length": 12, "fitness": "win rate + strategy diversity", "difficulty": "hard", "description": "Optimize game-playing strategies"},
  {"id": 67, "name": "Music Composition", "type": "creative", "length": 20, "fitness": "melody + harmony + rhythm", "difficulty": "hard", "description": "Compose musical sequences"},
  {"id": 68, "name": "Protein Folding", "type": "bio", "length": 18, "fitness": "energy minimization", "difficulty": "expert", "description": "Optimize protein 3D structures"},
  {"id": 69, "name": "Financial Portfolio", "type": "finance", "length": 22, "fitness": "return + risk + diversification", "difficulty": "hard", "description": "Optimize investment portfolios"},
  {"id": 70, "name": "Supply Chain Network", "type": "logistics", "length": 28, "fitness": "cost + time + reliability", "difficulty": "expert", "description": "Optimize supply chain networks"},
  
  {"id": 71, "name": "Hyperparameter Tuning", "type": "ml", "length": 10, "fitness": "validation accuracy + training time", "difficulty": "medium", "description": "Optimize ML model hyperparameters"},
  {"id": 72, "name": "Feature Selection", "type": "ml", "length": 35, "fitness": "accuracy + feature count", "difficulty": "medium", "description": "Select optimal feature subsets"},
  {"id": 73, "name": "Ensemble Learning", "type": "ml", "length": 15, "fitness": "diversity + accuracy", "difficulty": "hard", "description": "Optimize ensemble model combinations"},
  {"id": 74, "name": "AutoML Pipeline", "type": "ml", "length": 25, "fitness": "performance + interpretability", "difficulty": "expert", "description": "Design automated ML pipelines"},
  {"id": 75, "name": "Reinforcement Learning", "type": "rl", "length": 20, "fitness": "reward + exploration", "difficulty": "hard", "description": "Optimize RL agent policies"},
  
  {"id": 76, "name": "Computer Vision", "type": "vision", "length": 16, "fitness": "accuracy + efficiency", "difficulty": "hard", "description": "Optimize CV model architectures"},
  {"id": 77, "name": "Natural Language Processing", "type": "nlp", "length": 18, "fitness": "performance + interpretability", "difficulty": "hard", "description": "Optimize NLP model designs"},
  {"id": 78, "name": "Speech Recognition", "type": "audio", "length": 14, "fitness": "accuracy + latency", "difficulty": "medium", "description": "Optimize speech models"},
  {"id": 79, "name": "Recommendation System", "type": "recsys", "length": 24, "fitness": "precision + recall + diversity", "difficulty": "hard", "description": "Optimize recommendation algorithms"},
  {"id": 80, "name": "Anomaly Detection", "type": "detection", "length": 20, "fitness": "detection rate + false positives", "difficulty": "medium", "description": "Optimize anomaly detection systems"},
  
  {"id": 81, "name": "Time Series Forecasting", "type": "forecasting", "length": 16, "fitness": "accuracy + horizon", "difficulty": "hard", "description": "Optimize forecasting models"},
  {"id": 82, "name": "Clustering", "type": "clustering", "length": 18, "fitness": "silhouette + calinski", "difficulty": "medium", "description": "Optimize clustering algorithms"},
  {"id": 83, "name": "Dimensionality Reduction", "type": "dimred", "length": 22, "fitness": "variance + reconstruction", "difficulty": "medium", "description": "Optimize dimension reduction"},
  {"id": 84, "name": "Active Learning", "type": "active", "length": 12, "fitness": "information gain + cost", "difficulty": "hard", "description": "Optimize active learning strategies"},
  {"id": 85, "name": "Transfer Learning", "type": "transfer", "length": 20, "fitness": "target performance + adaptation", "difficulty": "expert", "description": "Optimize transfer learning approaches"},
  
  {"id": 86, "name": "Federated Learning", "type": "federated", "length": 26, "fitness": "global accuracy + privacy", "difficulty": "expert", "description": "Optimize federated learning protocols"},
  {"id": 87, "name": "Meta-Learning", "type": "meta", "length": 24, "fitness": "adaptation speed + performance", "difficulty": "expert", "description": "Optimize meta-learning algorithms"},
  {"id": 88, "name": "Neural Architecture Search", "type": "nas", "length": 30, "fitness": "accuracy + efficiency + search", "difficulty": "expert", "description": "Optimize NAS strategies"},
  {"id": 89, "name": "AutoML", "type": "automl", "length": 28, "fitness": "performance + automation", "difficulty": "expert", "description": "Optimize AutoML frameworks"},
  {"id": 90, "name": "Neural Evolution", "type": "neuroevolution", "length": 32, "fitness": "fitness + complexity", "difficulty": "expert", "description": "Evolve neural network structures"},
  
  {"id": 91, "name": "Evolutionary Robotics", "type": "robotics", "length": 25, "fitness": "task completion + energy", "difficulty": "expert", "description": "Optimize robot behaviors"},
  {"id": 92, "name": "Swarm Intelligence", "type": "swarm", "length": 20, "fitness": "coordination + efficiency", "difficulty": "hard", "description": "Optimize swarm algorithms"},
  {"id": 93, "name": "Multi-Agent Systems", "type": "agents", "length": 22, "fitness": "cooperation + competition", "difficulty": "hard", "description": "Optimize multi-agent coordination"},
  {"id": 94, "name": "Game Theory", "type": "game_theory", "length": 18, "fitness": "equilibrium + stability", "difficulty": "expert", "description": "Optimize game theoretic strategies"},
  {"id": 95, "name": "Auction Design", "type": "auction", "length": 16, "fitness": "efficiency + revenue", "difficulty": "hard", "description": "Design optimal auction mechanisms"},
  
  {"id": 96, "name": "Blockchain Optimization", "type": "blockchain", "length": 24, "fitness": "throughput + security", "difficulty": "expert", "description": "Optimize blockchain protocols"},
  {"id": 97, "name": "Cryptocurrency Mining", "type": "crypto", "length": 20, "fitness": "hash rate + energy", "difficulty": "medium", "description": "Optimize mining strategies"},
  {"id": 98, "name": "Smart Contract", "type": "smart_contract", "length": 18, "fitness": "functionality + gas", "difficulty": "hard", "description": "Optimize smart contract code"},
  {"id": 99, "name": "DeFi Protocol", "type": "defi", "length": 26, "fitness": "yield + risk", "difficulty": "expert", "description": "Design DeFi protocols"},
  {"id": 100, "name": "Web3 Infrastructure", "type": "web3", "length": 30, "fitness": "scalability + decentralization", "difficulty": "expert", "description": "Optimize Web3 infrastructure"}
]